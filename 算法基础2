常见算法排序：
            冒泡排序   快速排序   希尔排序
            选择排序   堆排序     计数排序
            插入排序   归并排序   基数排序
            
  1.冒泡排序(BubbleSort)
      列表每相邻两个的数，如果前面比后面大，则交换这两个数。
      一趟排序完成后，则无序区减少一个数，有序区增加一个数。
      代码关键点：趟，无序区范围，
代码实现：
#!/usr/bin/env python
# _*_coding: utf-8 _*_
# @Time : 2020/10/1 13:50
# @Author : CN-JackZhang
# @File: bubble_sort.py

import random
#冒泡排序
def bubble_sort(li):
    for i in range(len(li)-1):  # 第i趟
        exchange = False
        for j in range(len(li)-i-1):
            if li[j] > li[j+1]:
                li[j+1], li[j] = li[j], li[j+1]
                exchange=True
        if not exchange:
            return
li = [random.randint(0,10000) for i in range(1000)]  # randint生成(0,10000)随机整数，用列表生成式生成长度1000的列表
print(li)
bubble_sort(li)
print(li)
  2.选择排序(SelectSort)
    一趟排序记录最小的数，放到第一个位置。
    再一趟排序记录列表无序区最小的数，放到第二个位置
    ......
    算法关键点：有序区和无序区，无序区最小数的位置
    时间复杂度：O(n^2)
代码实现： 
#!/usr/bin/env python
# _*_coding: utf-8 _*_
# @Time : 2020/10/1 14:25
# @Author : CN-JackZhang
# @File: select_sort.py

# 选择排序
def select_sort(li):
    for i in range(len(li)-1):  # i是第几趟
        min_loc = i
        for j in range(i+1, len(li)):
            if li[j] < li[min_loc]:
                min_loc = j
        li[i], li[min_loc] = li[min_loc], li[i]
        print(li)

li = [3,4,2,1,5,6,8,7,9]
print(li)
select_sort(li)
print(li)
  3.插入排序
    初始时手里(有序区)只有一张牌。
    每次(从无序区)摸一张牌，插入到手里已有牌的正确位置。
   代码实现：       
#!/usr/bin/env python
# _*_coding: utf-8 _*_
# @Time : 2020/10/1 18:56
# @Author : CN-JackZhang
# @File: insert_sort.py

# 插入算法
def insert_sort(li):
    for i in range(1, len(li)):  # 表示摸到牌的下标
        tmp = li[i]
        j = i - 1  # j指的是手里牌的下标
        while j >= 0 and li[j] > tmp:
            li[j+1] = li[j]
            j -= 1
        li[j+1] = tmp
        print(li)

li = [3,2,4,1,5,7,9,6,8]
insert_sort(li)
print(li)    
       
       
       
       
       
       
       
       
       
       
       
       
       
       
       
       
       
       
       

  
