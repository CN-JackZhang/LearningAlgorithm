常见算法排序：
           基础三人组  初级三人组 中级三人组
            冒泡排序   快速排序   希尔排序
            选择排序   堆排序     计数排序
            插入排序   归并排序   基数排序
            
  1.冒泡排序(BubbleSort)
      列表每相邻两个的数，如果前面比后面大，则交换这两个数。
      一趟排序完成后，则无序区减少一个数，有序区增加一个数。
      代码关键点：趟，无序区范围，
      时间复杂度：O(n^2)
代码实现：
#!/usr/bin/env python
# _*_coding: utf-8 _*_
# @Time : 2020/10/1 13:50
# @Author : CN-JackZhang
# @File: bubble_sort.py

import random
#冒泡排序
def bubble_sort(li):
    for i in range(len(li)-1):  # 第i趟
        exchange = False
        for j in range(len(li)-i-1):
            if li[j] > li[j+1]:
                li[j+1], li[j] = li[j], li[j+1]
                exchange=True
        if not exchange:
            return
li = [random.randint(0,10000) for i in range(1000)]  # randint生成(0,10000)随机整数，用列表生成式生成长度1000的列表
print(li)
bubble_sort(li)
print(li)
  2.选择排序(SelectSort)
    一趟排序记录最小的数，放到第一个位置。
    再一趟排序记录列表无序区最小的数，放到第二个位置
    ......
    算法关键点：有序区和无序区，无序区最小数的位置
    时间复杂度：O(n^2)
代码实现： 
#!/usr/bin/env python
# _*_coding: utf-8 _*_
# @Time : 2020/10/1 14:25
# @Author : CN-JackZhang
# @File: select_sort.py

# 选择排序
def select_sort(li):
    for i in range(len(li)-1):  # i是第几趟
        min_loc = i
        for j in range(i+1, len(li)):
            if li[j] < li[min_loc]:
                min_loc = j
        li[i], li[min_loc] = li[min_loc], li[i]
        print(li)

li = [3,4,2,1,5,6,8,7,9]
print(li)
select_sort(li)
print(li)
  3.插入排序
    初始时手里(有序区)只有一张牌。
    每次(从无序区)摸一张牌，插入到手里已有牌的正确位置。
    时间复杂度：O(n^2)
   代码实现：       
#!/usr/bin/env python
# _*_coding: utf-8 _*_
# @Time : 2020/10/1 18:56
# @Author : CN-JackZhang
# @File: insert_sort.py

# 插入算法
def insert_sort(li):
    for i in range(1, len(li)):  # 表示摸到牌的下标
        tmp = li[i]
        j = i - 1  # j指的是手里牌的下标
        while j >= 0 and li[j] > tmp:
            li[j+1] = li[j]
            j -= 1
        li[j+1] = tmp
        print(li)

li = [3,2,4,1,5,7,9,6,8]
print(li)
insert_sort(li)
print(li)    

小结：冒泡排序，选择排序，插入排序，的时间复杂度都是O(n^2)，都是原地排序。
     O(n^2)的效率怎么样？
     
   4.快速排序
   快速排序思路：
            1.取一个元素P(第一个元素)，使元素P归位，
            2.列表被P分为两部分，左边都比P小，右边都比P大，
            3.递归完成排序。
   快速排序的效率： 
            快速排序的时间复杂度：O(nlogn)
   快速排序的问题：
            最坏情况，随机化版本的快速排序，
            递归,递归会消耗很多系统资源。
   代码实现：
#!/usr/bin/env python
# _*_coding: utf-8 _*_
# @Time : 2020/10/1 19:40
# @Author : CN-JackZhang
# @File: quick_sort.py

# 快速算法

def partition(li, left, right):
    tmp = li[left]
    while left < right:
        while left < right and li[right] >= tmp:  # 从右面找比tmp小的数
            right -= 1  # 往左走一步
        li[left] = li[right]  # 把右边的值写到左边的空位上
        print(li, "right")
        while left < right and li[left] <= tmp:
            left += 1
        li[right] = li[left]    # 把左边的值写到右边空位上
        print(li, "left")
    li[left] = tmp  # 把tmp归位
    return left

def quick_sort(li, left, right):
    if left < right:    # 至少两个元素
        mid = partition(li, left, right)
        quick_sort(li, left, mid-1)
        quick_sort(li, mid+1, right)

li = [5,7,4,6,3,1,2,9,8]
print(li)
quick_sort(li, 0, len(li)-1)
print(li)

5.堆排序前传——树与二叉树
            树是一种数据结构  如：目录结构
            树是一种可以递归定义的数据结构
            树是由n个节点组成的集合：
                        若n=0，那这是一棵空树
                        若n>0，那存在1个节点作为树的根节点，其他节点可以分为m个集合，每个集合本身又是一棵树。
             一些概念：
                        根节点，叶子节点
                        根的深度(高度)
                        树的度
            二叉树：度不超过2的树(白话:每个节点往下最多分两个叉)，每个节点最多有两个孩子节点，左孩子节点，右孩子节点。            
            完全二叉树:
            完全二叉树：
            二叉树的存储方式(表示方式)：
                        链式存储方式：
                        顺序存储方式：用列表来存
            堆排序：一种特殊的完全二叉树结构
                        大根堆：
                        小根堆：
                        
                    堆的向下调整，假设：节点的左右子树都是堆，但自身不是堆，
                    可以通过一次向下的调整来将其变换成一个堆。
             堆排序过程：  (挨个出数)   算法，内存能省则省，时间能快则快。
                        1.建立堆。    怎么样建立一个堆？要让下级先有序，农村包围城市。
                        2.得到堆顶元素，为最大元素。
                        3.去掉堆顶，将堆最后一个元素放到堆顶，此时可通过一次调整重新使堆有序。
                        4.堆顶元素为第二大元素。
                        5.重复步骤3，直到堆变空。
             堆排序——内置模块
                        ——heapq
                        常用函数：       
                                    heapify(x)     建一个小根堆
                                    heappush(heap,item)
                                    heappop(heap)   弹出一个最小元素
#!/usr/bin/env python
# _*_coding: utf-8 _*_
# @Time : 2020/10/2 14:57
# @Author : CN-JackZhang
# @File: heap2.py

# python内置模块

import heapq
import random

li = list(range(100))
random.shuffle(li)

print(li)

heapq.heapify(li)   # 建了一个小根堆
n = len(li)
for i in range(n):
    print(heapq.heappop(li), end=",")

             堆排序时间复杂度：O(nlogn)
堆排序代码实现:
#!/usr/bin/env python
# _*_coding: utf-8 _*_
# @Time : 2020/10/2 10:39
# @Author : CN-JackZhang
# @File: heap_sort.py

import random
# 堆排序

def sift(li, low, high):    # 调整函数
    """
    :param li:列表
    :param low: 堆的根节点位置
    :param high: 堆的最后一个元素的位置
    :return:
    """
    i = low     # 最开始指向根节点
    j = 2 * i + 1   # j开始是左孩子
    tmp = li[low]   # 把堆顶存起来
    while j <= high:
        if j + 1 <= high and li[j+1] > li[j]:   # 如果右孩子有且比较大
            j = j + 1   # j指向右孩子
        if li[j] > tmp:
            li[i] = li[j]
            i = j   # 往下看一层
            j = 2 * i + 1
        else:   # tmp更大，把tmp放到i的位置上
            li[i] = tmp     # 把tmp放到某一级领导位置上
            break
    else:
        li[i] = tmp     # 把tmp放到叶子节点上

def heap_sort(li):
    n = len(li)
    for i in range((n-2) // 2, -1, -1):
        # i表示建堆的时候调整的部分的根的下标
        sift(li, i, n-1)
    # 建堆完成了
    for i in range(n-1, -1, -1):
        # i指向当前堆的最后一个元素
        li[0], li[i] = li[i], li[0]
        sift(li, 0, i-1)    # i-1是新的high
    print(li)

li = [i for i in range(100)]
random.shuffle(li)
print(li)

heap_sort(li)
print(li)
堆排序应用——topk问题
            现在有n个数，设计算法得到前k大的数。(k<n)
            解决思路:
                        1.排序后切片 O(nlogn)
                        2.排序基础三人组：O(kn)
                取列表前k个元素建立一个小根堆。堆顶就是目前第k大的数。
                依次向后遍历原列表，对于列表中的元素，如果小于堆顶，则忽略该元素；如果大于堆顶，则将堆顶更换为该元素，并且对堆进行一次调整。
                遍历列表所有元素后，倒序弹出堆顶。
                
  6.归并排序
           分解：将列表越分越小，直至分成一个元素。
           终止条件：一个元素是有序的。
           合并：将两个有序列表归并，列表越来越大。
           时间复杂度O(nlogn)
           空间复杂度：O(n)
           之前的排序，原地排序，在本来那个列表上通过交换，没有需要额外申请一个列表，归并排序需要额外的空间。
           Python的sort基于归并排序，
    

        快速排序，堆排序，归并排序总结：
           时间复杂度都是O(nlogn)
           一般情况下，就运行时间而言：        
                      快速排序<归并排序<堆排序
           3种排序算法的缺点： 
                      快速排序：极端情况下排序效率低
                      归并排序：需要额外的内存开销
                      堆排序：在快的排序算法中相对较慢
                      
                      
         
                        
                        
                        
                        
                        
                        
                        
                        
                        
                        
                        
                        
                        
                        
                        
                        
                        
                        
                        
                        
                        
   
       
       
       
       
       
       
       
       
       
       
       
       
       
       
       
       
       
       
       

  
